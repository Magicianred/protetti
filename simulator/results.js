import{COLORS,RUN,TOTAL_TICKS,STATES,COUNTERS,resetRun}from"./options.js";import{graphElement,replayElement,appUsersElement,totalPeopleElement,infectedPeopleElement,maxMovementSpeedElement,deathElement,stayHomeElement}from"./dom.js";let graphPoint=0;const matchMedia=window.matchMedia("(min-width: 800px)");let isDesktop=matchMedia.matches;const domElements=Object.fromEntries(Object.keys(COUNTERS).map(e=>{const t=document.getElementById(e);return t&&(t.parentNode.style="color: "+COLORS[e]),[e,document.getElementById(e)]})),updateGraph=()=>{let e=0;const t=document.getElementById("total_people").value,n=Object.entries(RUN.results).map(([n,l])=>{const s=COLORS[n];if(l>0){const n=l/t*50,a=`<rect height="${n}" y="${e}" width="1" fill="${s}"></rect>`;return e+=n,a}return""}).join(""),l=`<g transform="translate(${graphPoint},0)">${n}</g>`;graphPoint++,graphElement.insertAdjacentHTML("beforeend",l)};export const resetValues=(e=isDesktop)=>{graphElement.innerHTML="",replayElement.style.display="none",appUsersElement.disabled=!0,totalPeopleElement.disabled=!0,infectedPeopleElement.disabled=!0,maxMovementSpeedElement.disabled=!0,deathElement.disabled=!0,stayHomeElement.disabled=!0,graphPoint=0,isDesktop=e,resetRun()};export const updateCount=()=>{RUN.tick<TOTAL_TICKS&&(RUN.results[STATES.infected]>RUN.results["max-concurrent-infected"]&&RUN.results["max-concurrent-infected"]++,Object.entries(domElements).forEach(([e,t])=>{t&&(t.innerText=RUN.results[e])}),isDesktop?RUN.tick%2==0&&updateGraph():RUN.tick%4==0&&updateGraph()),RUN.tick===TOTAL_TICKS?(replayElement.style.display="flex",appUsersElement.disabled=!1,totalPeopleElement.disabled=!1,infectedPeopleElement.disabled=!1,maxMovementSpeedElement.disabled=!1,deathElement.disabled=!1,stayHomeElement.disabled=!1):RUN.tick++};
